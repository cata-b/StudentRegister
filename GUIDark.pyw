from PyQt5 import QtCore, QtGui, QtWidgets
from Domain.CustomErrors import *
from Domain.Student import Student
from Domain.Discipline import Discipline

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(880, 614)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.MainTabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.MainTabWidget.setGeometry(QtCore.QRect(10, 10, 851, 541))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.MainTabWidget.sizePolicy().hasHeightForWidth())
        self.MainTabWidget.setSizePolicy(sizePolicy)
        self.MainTabWidget.setObjectName("MainTabWidget")
        self.StudentsTab = QtWidgets.QWidget()
        self.StudentsTab.setObjectName("StudentsTab")
        self.StudentsTable = QtWidgets.QTableWidget(self.StudentsTab)
        self.StudentsTable.setGeometry(QtCore.QRect(0, 0, 841, 351))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.StudentsTable.sizePolicy().hasHeightForWidth())
        self.StudentsTable.setSizePolicy(sizePolicy)
        self.StudentsTable.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.StudentsTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.StudentsTable.setObjectName("StudentsTable")
        self.StudentsTable.setColumnCount(2)
        self.StudentsTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.StudentsTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.StudentsTable.setHorizontalHeaderItem(1, item)
        self.UpdateStudentBtn = QtWidgets.QPushButton(self.StudentsTab)
        self.UpdateStudentBtn.setGeometry(QtCore.QRect(210, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.UpdateStudentBtn.setFont(font)
        self.UpdateStudentBtn.setObjectName("UpdateStudentBtn")
        self.RemoveStudentBtn = QtWidgets.QPushButton(self.StudentsTab)
        self.RemoveStudentBtn.setGeometry(QtCore.QRect(310, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.RemoveStudentBtn.setFont(font)
        self.RemoveStudentBtn.setObjectName("RemoveStudentBtn")
        self.SearchStudentBtn = QtWidgets.QPushButton(self.StudentsTab)
        self.SearchStudentBtn.setGeometry(QtCore.QRect(110, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.SearchStudentBtn.setFont(font)
        self.SearchStudentBtn.setObjectName("SearchStudentBtn")
        self.StudentNameLineEdit = QtWidgets.QLineEdit(self.StudentsTab)
        self.StudentNameLineEdit.setGeometry(QtCore.QRect(130, 400, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.StudentNameLineEdit.setFont(font)
        self.StudentNameLineEdit.setObjectName("StudentNameLineEdit")
        self.StudentIDLineEdit = QtWidgets.QLineEdit(self.StudentsTab)
        self.StudentIDLineEdit.setGeometry(QtCore.QRect(130, 360, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.StudentIDLineEdit.setFont(font)
        self.StudentIDLineEdit.setObjectName("StudentIDLineEdit")
        self.label = QtWidgets.QLabel(self.StudentsTab)
        self.label.setGeometry(QtCore.QRect(40, 360, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_6 = QtWidgets.QLabel(self.StudentsTab)
        self.label_6.setGeometry(QtCore.QRect(40, 400, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.AddStudentBtn = QtWidgets.QPushButton(self.StudentsTab)
        self.AddStudentBtn.setGeometry(QtCore.QRect(10, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.AddStudentBtn.setFont(font)
        self.AddStudentBtn.setObjectName("AddStudentBtn")
        self.radioButtonSID = QtWidgets.QRadioButton(self.StudentsTab)
        self.radioButtonSID.setGeometry(QtCore.QRect(430, 360, 95, 20))
        self.radioButtonSID.setObjectName("radioButtonSID")
        self.buttonGroup = QtWidgets.QButtonGroup(MainWindow)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.radioButtonSID)
        self.radioButtonSN = QtWidgets.QRadioButton(self.StudentsTab)
        self.radioButtonSN.setGeometry(QtCore.QRect(430, 410, 121, 20))
        self.radioButtonSN.setObjectName("radioButtonSN")
        self.buttonGroup.addButton(self.radioButtonSN)
        self.MainTabWidget.addTab(self.StudentsTab, "")
        self.DisciplinesTab = QtWidgets.QWidget()
        self.DisciplinesTab.setObjectName("DisciplinesTab")
        self.DisciplinesTable = QtWidgets.QTableWidget(self.DisciplinesTab)
        self.DisciplinesTable.setGeometry(QtCore.QRect(0, 0, 841, 351))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DisciplinesTable.sizePolicy().hasHeightForWidth())
        self.DisciplinesTable.setSizePolicy(sizePolicy)
        self.DisciplinesTable.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.DisciplinesTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.DisciplinesTable.setObjectName("DisciplinesTable")
        self.DisciplinesTable.setColumnCount(2)
        self.DisciplinesTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.DisciplinesTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DisciplinesTable.setHorizontalHeaderItem(1, item)
        self.label_2 = QtWidgets.QLabel(self.DisciplinesTab)
        self.label_2.setGeometry(QtCore.QRect(40, 360, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_7 = QtWidgets.QLabel(self.DisciplinesTab)
        self.label_7.setGeometry(QtCore.QRect(40, 400, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.RemoveDisciplineBtn = QtWidgets.QPushButton(self.DisciplinesTab)
        self.RemoveDisciplineBtn.setGeometry(QtCore.QRect(310, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.RemoveDisciplineBtn.setFont(font)
        self.RemoveDisciplineBtn.setObjectName("RemoveDisciplineBtn")
        self.DisciplineNameLineEdit = QtWidgets.QLineEdit(self.DisciplinesTab)
        self.DisciplineNameLineEdit.setGeometry(QtCore.QRect(130, 400, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.DisciplineNameLineEdit.setFont(font)
        self.DisciplineNameLineEdit.setObjectName("DisciplineNameLineEdit")
        self.UpdateDisciplineBtn = QtWidgets.QPushButton(self.DisciplinesTab)
        self.UpdateDisciplineBtn.setGeometry(QtCore.QRect(210, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.UpdateDisciplineBtn.setFont(font)
        self.UpdateDisciplineBtn.setObjectName("UpdateDisciplineBtn")
        self.DisciplineIDLineEdit = QtWidgets.QLineEdit(self.DisciplinesTab)
        self.DisciplineIDLineEdit.setGeometry(QtCore.QRect(130, 360, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.DisciplineIDLineEdit.setFont(font)
        self.DisciplineIDLineEdit.setObjectName("DisciplineIDLineEdit")
        self.AddDisciplineBtn = QtWidgets.QPushButton(self.DisciplinesTab)
        self.AddDisciplineBtn.setGeometry(QtCore.QRect(10, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.AddDisciplineBtn.setFont(font)
        self.AddDisciplineBtn.setObjectName("AddDisciplineBtn")
        self.SearchDisciplineBtn = QtWidgets.QPushButton(self.DisciplinesTab)
        self.SearchDisciplineBtn.setGeometry(QtCore.QRect(110, 450, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.SearchDisciplineBtn.setFont(font)
        self.SearchDisciplineBtn.setObjectName("SearchDisciplineBtn")
        self.radioButtonDN = QtWidgets.QRadioButton(self.DisciplinesTab)
        self.radioButtonDN.setGeometry(QtCore.QRect(430, 410, 121, 20))
        self.radioButtonDN.setObjectName("radioButtonDN")
        self.buttonGroup_2 = QtWidgets.QButtonGroup(MainWindow)
        self.buttonGroup_2.setObjectName("buttonGroup_2")
        self.buttonGroup_2.addButton(self.radioButtonDN)
        self.radioButtonDID = QtWidgets.QRadioButton(self.DisciplinesTab)
        self.radioButtonDID.setGeometry(QtCore.QRect(430, 360, 95, 20))
        self.radioButtonDID.setObjectName("radioButtonDID")
        self.buttonGroup_2.addButton(self.radioButtonDID)
        self.MainTabWidget.addTab(self.DisciplinesTab, "")
        self.GradesTab = QtWidgets.QWidget()
        self.GradesTab.setObjectName("GradesTab")
        self.GradesTable = QtWidgets.QTableWidget(self.GradesTab)
        self.GradesTable.setGeometry(QtCore.QRect(0, 0, 631, 511))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.GradesTable.sizePolicy().hasHeightForWidth())
        self.GradesTable.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.GradesTable.setFont(font)
        self.GradesTable.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.GradesTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.GradesTable.setObjectName("GradesTable")
        self.GradesTable.setColumnCount(4)
        self.GradesTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.GradesTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.GradesTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.GradesTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.GradesTable.setHorizontalHeaderItem(3, item)
        self.GradeStudentCombo = QtWidgets.QComboBox(self.GradesTab)
        self.GradeStudentCombo.setGeometry(QtCore.QRect(640, 40, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.GradeStudentCombo.setFont(font)
        self.GradeStudentCombo.setObjectName("GradeStudentCombo")
        self.label_3 = QtWidgets.QLabel(self.GradesTab)
        self.label_3.setGeometry(QtCore.QRect(650, 0, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.GradesTab)
        self.label_4.setGeometry(QtCore.QRect(650, 80, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.GradeDisciplineCombo = QtWidgets.QComboBox(self.GradesTab)
        self.GradeDisciplineCombo.setGeometry(QtCore.QRect(640, 120, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.GradeDisciplineCombo.setFont(font)
        self.GradeDisciplineCombo.setObjectName("GradeDisciplineCombo")
        self.label_5 = QtWidgets.QLabel(self.GradesTab)
        self.label_5.setGeometry(QtCore.QRect(650, 160, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.GradeValueEdit = QtWidgets.QLineEdit(self.GradesTab)
        self.GradeValueEdit.setGeometry(QtCore.QRect(640, 200, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.GradeValueEdit.setFont(font)
        self.GradeValueEdit.setObjectName("GradeValueEdit")
        self.AddGradeBtn = QtWidgets.QPushButton(self.GradesTab)
        self.AddGradeBtn.setGeometry(QtCore.QRect(660, 250, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.AddGradeBtn.setFont(font)
        self.AddGradeBtn.setObjectName("AddGradeBtn")
        self.MainTabWidget.addTab(self.GradesTab, "")
        self.StatisticsTab = QtWidgets.QWidget()
        self.StatisticsTab.setObjectName("StatisticsTab")
        self.StatisticsTabWidget = QtWidgets.QTabWidget(self.StatisticsTab)
        self.StatisticsTabWidget.setGeometry(QtCore.QRect(0, 0, 841, 511))
        self.StatisticsTabWidget.setObjectName("StatisticsTabWidget")
        self.FailingTab = QtWidgets.QWidget()
        self.FailingTab.setObjectName("FailingTab")
        self.FailingStudentsTable = QtWidgets.QTableWidget(self.FailingTab)
        self.FailingStudentsTable.setGeometry(QtCore.QRect(0, 0, 831, 481))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FailingStudentsTable.sizePolicy().hasHeightForWidth())
        self.FailingStudentsTable.setSizePolicy(sizePolicy)
        self.FailingStudentsTable.setObjectName("FailingStudentsTable")
        self.FailingStudentsTable.setColumnCount(3)
        self.FailingStudentsTable.setRowCount(0)
        self.FailingStudentsTable.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.FailingStudentsTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        item = QtWidgets.QTableWidgetItem()
        self.FailingStudentsTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.FailingStudentsTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.FailingStudentsTable.setHorizontalHeaderItem(2, item)
        self.StatisticsTabWidget.addTab(self.FailingTab, "")
        self.BestTab = QtWidgets.QWidget()
        self.BestTab.setObjectName("BestTab")
        self.BestStudentsTable = QtWidgets.QTableWidget(self.BestTab)
        self.BestStudentsTable.setGeometry(QtCore.QRect(0, 0, 831, 481))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BestStudentsTable.sizePolicy().hasHeightForWidth())
        self.BestStudentsTable.setSizePolicy(sizePolicy)
        self.BestStudentsTable.setObjectName("BestStudentsTable")
        self.BestStudentsTable.setColumnCount(3)
        self.BestStudentsTable.setRowCount(0)
        self.BestStudentsTable.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.BestStudentsTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        item = QtWidgets.QTableWidgetItem()
        self.BestStudentsTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BestStudentsTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BestStudentsTable.setHorizontalHeaderItem(2, item)
        self.StatisticsTabWidget.addTab(self.BestTab, "")
        self.AvgGradeTab = QtWidgets.QWidget()
        self.AvgGradeTab.setObjectName("AvgGradeTab")
        self.EasiestDisciplinesTable = QtWidgets.QTableWidget(self.AvgGradeTab)
        self.EasiestDisciplinesTable.setGeometry(QtCore.QRect(0, 0, 831, 481))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EasiestDisciplinesTable.sizePolicy().hasHeightForWidth())
        self.EasiestDisciplinesTable.setSizePolicy(sizePolicy)
        self.EasiestDisciplinesTable.setObjectName("EasiestDisciplinesTable")
        self.EasiestDisciplinesTable.setColumnCount(3)
        self.EasiestDisciplinesTable.setRowCount(0)
        self.EasiestDisciplinesTable.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.EasiestDisciplinesTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        item = QtWidgets.QTableWidgetItem()
        self.EasiestDisciplinesTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.EasiestDisciplinesTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.EasiestDisciplinesTable.setHorizontalHeaderItem(2, item)
        self.StatisticsTabWidget.addTab(self.AvgGradeTab, "")
        self.MainTabWidget.addTab(self.StatisticsTab, "")
        self.UndoBtn = QtWidgets.QPushButton(self.centralwidget)
        self.UndoBtn.setGeometry(QtCore.QRect(20, 570, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.UndoBtn.setFont(font)
        self.UndoBtn.setObjectName("UndoBtn")
        self.RedoBtn = QtWidgets.QPushButton(self.centralwidget)
        self.RedoBtn.setGeometry(QtCore.QRect(640, 570, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.RedoBtn.setFont(font)
        self.RedoBtn.setObjectName("RedoBtn")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.MainTabWidget.setCurrentIndex(0)
        self.StatisticsTabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Student Register"))
        item = self.StudentsTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.StudentsTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        self.UpdateStudentBtn.setText(_translate("MainWindow", "Update"))
        self.RemoveStudentBtn.setText(_translate("MainWindow", "Remove"))
        self.SearchStudentBtn.setText(_translate("MainWindow", "Search"))
        self.label.setText(_translate("MainWindow", "ID:"))
        self.label_6.setText(_translate("MainWindow", "Name: "))
        self.AddStudentBtn.setText(_translate("MainWindow", "Add"))
        self.radioButtonSID.setText(_translate("MainWindow", "Search by ID"))
        self.radioButtonSN.setText(_translate("MainWindow", "Search by Name"))
        self.MainTabWidget.setTabText(self.MainTabWidget.indexOf(self.StudentsTab), _translate("MainWindow", "Students"))
        item = self.DisciplinesTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.DisciplinesTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        self.label_2.setText(_translate("MainWindow", "ID:"))
        self.label_7.setText(_translate("MainWindow", "Name: "))
        self.RemoveDisciplineBtn.setText(_translate("MainWindow", "Remove"))
        self.UpdateDisciplineBtn.setText(_translate("MainWindow", "Update"))
        self.AddDisciplineBtn.setText(_translate("MainWindow", "Add"))
        self.SearchDisciplineBtn.setText(_translate("MainWindow", "Search"))
        self.radioButtonDN.setText(_translate("MainWindow", "Search by Name"))
        self.radioButtonDID.setText(_translate("MainWindow", "Search by ID"))
        self.MainTabWidget.setTabText(self.MainTabWidget.indexOf(self.DisciplinesTab), _translate("MainWindow", "Disciplines"))
        item = self.GradesTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.GradesTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Student"))
        item = self.GradesTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Discipline"))
        item = self.GradesTable.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Value"))
        self.label_3.setText(_translate("MainWindow", "Student:"))
        self.label_4.setText(_translate("MainWindow", "Discipline:"))
        self.label_5.setText(_translate("MainWindow", "Grade value:"))
        self.AddGradeBtn.setText(_translate("MainWindow", "Add Grade"))
        self.MainTabWidget.setTabText(self.MainTabWidget.indexOf(self.GradesTab), _translate("MainWindow", "Grades"))
        item = self.FailingStudentsTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.FailingStudentsTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.FailingStudentsTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Failing at"))
        self.StatisticsTabWidget.setTabText(self.StatisticsTabWidget.indexOf(self.FailingTab), _translate("MainWindow", "Failing Students"))
        item = self.BestStudentsTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.BestStudentsTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.BestStudentsTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Aggregated avg."))
        self.StatisticsTabWidget.setTabText(self.StatisticsTabWidget.indexOf(self.BestTab), _translate("MainWindow", "Best Students"))
        item = self.EasiestDisciplinesTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.EasiestDisciplinesTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.EasiestDisciplinesTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", " Average Grade"))
        self.StatisticsTabWidget.setTabText(self.StatisticsTabWidget.indexOf(self.AvgGradeTab), _translate("MainWindow", "Disciplines with Highest Average Grade"))
        self.MainTabWidget.setTabText(self.MainTabWidget.indexOf(self.StatisticsTab), _translate("MainWindow", "Statistics"))
        self.UndoBtn.setText(_translate("MainWindow", "Undo"))
        self.RedoBtn.setText(_translate("MainWindow", "Redo"))
        
    def __list_students(self):
        student_list = self.__service.StudentList
        IDText = self.StudentIDLineEdit.text()
        NameText = self.StudentNameLineEdit.text()
        itemIDs = student_list.IDs
        if self.radioButtonSID.isChecked():
            if IDText != "":
                student_list.SetQueryOptions(FilterAttribute="ID", FilterValue=IDText, StrictFilter=False, OrderAttribute="ID", Descending=False)
                itemIDs = student_list.QueryIDs
        elif self.radioButtonSN.isChecked():
            if NameText != "":
                student_list.SetQueryOptions(FilterAttribute="Name", FilterValue=NameText, StrictFilter=False, OrderAttribute="ID", Descending=False)
                itemIDs = student_list.QueryIDs

        self.StudentsTable.setRowCount(len(itemIDs))
        for row in range(len(itemIDs)):
            item = QtWidgets.QTableWidgetItem(str(student_list[itemIDs[row]].ID))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.StudentsTable.setItem(row, 0, item)
            item = QtWidgets.QTableWidgetItem(str(student_list[itemIDs[row]].Name))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.StudentsTable.setItem(row, 1, item)
    def __add_student(self):
        NameText = self.StudentNameLineEdit.text()
        if NameText != "":
            self.__service.AddStudent(NameText)
            self.StudentIDLineEdit.setText("")
            self.StudentNameLineEdit.setText("")
            self.__list_students()
        else:
            QtWidgets.QMessageBox.warning(self.StudentsTab, "Student Register", "Empty name is not allowed.")
    def __copy_student(self, row, column):
        self.StudentIDLineEdit.setText(self.StudentsTable.item(row, 0).text())
        self.StudentNameLineEdit.setText(self.StudentsTable.item(row, 1).text())
    def __remove_student(self):
        IDText = self.StudentIDLineEdit.text()
        if IDText == "":
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", "Empty fields are not allowed.")
            return
        try:
            slist = self.__service.StudentList
            if QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", "Remove student with " + str(slist[int(IDText)]) + " ?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No) == QtWidgets.QMessageBox.Yes:
                self.__service.RemoveStudent(slist[int(IDText)])
                self.StudentIDLineEdit.setText("")
                self.StudentNameLineEdit.setText("")
                self.__list_students()
        except NonExistentItemIDError as e:
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", str(e))
        except (InvalidParametersError, ValueError):
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", "ID should be an integer value.")
    def __update_student(self):
        IDText = self.StudentIDLineEdit.text()
        NameText = self.StudentNameLineEdit.text()
        if NameText != "" and IDText != "":
            try:
                self.__service.UpdateStudent(self.__service.StudentList[int(IDText)], Student(int(IDText), NameText))
                self.StudentIDLineEdit.setText("")
                self.StudentNameLineEdit.setText("")
                self.__list_students()
            except (ValueError, InvalidParametersError):
                QtWidgets.QMessageBox.warning(self.StudentsTab, "Student Register", "Invalid ID.")
            except NonExistentItemIDError as e:
                QtWidgets.QMessageBox.warning(self.StudentsTab, "Student Register", str(e))
        else:
            QtWidgets.QMessageBox.warning(self.StudentsTab, "Student Register", "Empty fields are not allowed.")
    
    def __list_disciplines(self):
        discipline_list = self.__service.DisciplineList
        self.DisciplinesTable.setRowCount(discipline_list.Length())
        IDText = self.DisciplineIDLineEdit.text()
        NameText = self.DisciplineNameLineEdit.text()
        itemIDs = discipline_list.IDs
        if self.radioButtonDID.isChecked():
            if IDText != "":
                discipline_list.SetQueryOptions(FilterAttribute="ID", FilterValue=IDText, StrictFilter=False, OrderAttribute="ID", Descending=False)
                itemIDs = discipline_list.QueryIDs
        elif self.radioButtonDN.isChecked():
            if NameText != "":
                discipline_list.SetQueryOptions(FilterAttribute="Name", FilterValue=NameText, StrictFilter=False, OrderAttribute="ID", Descending=False)
                itemIDs = discipline_list.QueryIDs
        self.DisciplinesTable.setRowCount(len(itemIDs))
        for row in range(len(itemIDs)):
            item = QtWidgets.QTableWidgetItem(str(discipline_list[itemIDs[row]].ID))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.DisciplinesTable.setItem(row, 0, item)
            item = QtWidgets.QTableWidgetItem(str(discipline_list[itemIDs[row]].Name))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.DisciplinesTable.setItem(row, 1, item)
    def __add_discipline(self):
        NameText = self.DisciplineNameLineEdit.text()
        if NameText != "":
            self.__service.AddDiscipline(NameText)
            self.DisciplineIDLineEdit.setText("")
            self.DisciplineNameLineEdit.setText("")
            self.__list_disciplines()
        else:
            QtWidgets.QMessageBox.warning(self.DisciplinesTab, "Student Register", "Empty name is not allowed.")
    def __copy_discipline(self, row, column):
        self.DisciplineIDLineEdit.setText(self.DisciplinesTable.item(row, 0).text())
        self.DisciplineNameLineEdit.setText(self.DisciplinesTable.item(row, 1).text())
    def __remove_discipline(self):
        IDText = self.DisciplineIDLineEdit.text()
        if IDText == "":
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", "Empty fields are not allowed.")
            return
        try:
            dlist = self.__service.DisciplineList
            if QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", "Remove discipline with " + str(dlist[int(IDText)]) + " ?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No) == QtWidgets.QMessageBox.Yes:
                self.__service.RemoveDiscipline(dlist[int(IDText)])
                self.DisciplineIDLineEdit.setText("")
                self.DisciplineNameLineEdit.setText("")
                self.__list_disciplines()
        except NonExistentItemIDError as e:
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", str(e))
        except (InvalidParametersError, ValueError):
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", "ID should be an integer value.")
    def __update_discipline(self):
        IDText = self.DisciplineIDLineEdit.text()
        NameText = self.DisciplineNameLineEdit.text()
        if NameText != "" and IDText != "":
            try:
                self.__service.UpdateDiscipline(self.__service.DisciplineList[int(IDText)], Discipline(int(IDText), NameText))
                self.DisciplineIDLineEdit.setText("")
                self.DisciplineNameLineEdit.setText("")
                self.__list_disciplines()
            except (ValueError, InvalidParametersError):
                QtWidgets.QMessageBox.warning(self.StudentsTab, "Student Register", "Invalid ID.")
            except NonExistentItemIDError as e:
                QtWidgets.QMessageBox.warning(self.StudentsTab, "Student Register", str(e))
        else:
            QtWidgets.QMessageBox.warning(self.StudentsTab, "Student Register", "Empty fields are not allowed.")

    def __add_grade(self):
        try:
            self.__service.AddGrade(\
                self.__service.StudentList[int(self.GradeStudentCombo.currentData())], \
                self.__service.DisciplineList[int(self.GradeDisciplineCombo.currentData())], \
                self.GradeValueEdit.text())
        except InvalidParametersError as e:
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", str(e))
        self.__list_grades()
    def __list_grades(self):
        student_list = self.__service.StudentList
        discipline_list = self.__service.DisciplineList
        grade_list = self.__service.GradeList
        self.GradesTable.setRowCount(grade_list.Length())
        for row in range(grade_list.Length()):
            item = QtWidgets.QTableWidgetItem(str(grade_list[grade_list.IDs[row]].ID))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.GradesTable.setItem(row, 0, item)
            item = QtWidgets.QTableWidgetItem(str(student_list[grade_list[grade_list.IDs[row]].StudentID]))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.GradesTable.setItem(row, 1, item)
            item = QtWidgets.QTableWidgetItem(str(discipline_list[grade_list[grade_list.IDs[row]].DisciplineID]))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.GradesTable.setItem(row, 2, item)
            item = QtWidgets.QTableWidgetItem(str(grade_list[grade_list.IDs[row]].Value))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.GradesTable.setItem(row, 3, item)

    
    def __failing_students(self):
        failing = self.__service.GetFailingStudents()
        self.FailingStudentsTable.setRowCount(len(failing))
        for row in range(len(failing)):
            item = QtWidgets.QTableWidgetItem(str(failing[row][0].ID))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.FailingStudentsTable.setItem(row, 0, item)
            item = QtWidgets.QTableWidgetItem(str(failing[row][0].Name))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.FailingStudentsTable.setItem(row, 1, item)

            failing_disciplines_str = ""
            for tupl in failing[row][1]:
                failing_disciplines_str += "%s, Average: %s\n" % (str(tupl[0]), str(tupl[1]))
            item = QtWidgets.QTableWidgetItem(failing_disciplines_str)
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.FailingStudentsTable.setItem(row, 2, item)

    def __best_students(self):
        best = self.__service.GetBestSchoolSituation()
        self.BestStudentsTable.setRowCount(len(best))
        for row in range(len(best)):
            item = QtWidgets.QTableWidgetItem(str(best[row][0].ID))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.BestStudentsTable.setItem(row, 0, item)
            item = QtWidgets.QTableWidgetItem(str(best[row][0].Name))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.BestStudentsTable.setItem(row, 1, item)
            item = QtWidgets.QTableWidgetItem(str(best[row][1]))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.BestStudentsTable.setItem(row, 2, item)

    def __easiest_disciplines(self):
        best = self.__service.GetEasiestDisciplines()
        self.EasiestDisciplinesTable.setRowCount(len(best))
        for row in range(len(best)):
            item = QtWidgets.QTableWidgetItem(str(best[row][0].ID))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.EasiestDisciplinesTable.setItem(row, 0, item)
            item = QtWidgets.QTableWidgetItem(str(best[row][0].Name))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.EasiestDisciplinesTable.setItem(row, 1, item)
            item = QtWidgets.QTableWidgetItem(str(best[row][1]))
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
            self.EasiestDisciplinesTable.setItem(row, 2, item)

    def __undo(self):
        try:
            self.__service.Undo()
            self.StudentIDLineEdit.setText("")
            self.StudentNameLineEdit.setText("")
            self.DisciplineIDLineEdit.setText("")
            self.DisciplineNameLineEdit.setText("")
            self.__list_disciplines()
            self.__list_grades()
            self.__list_students()
            self.__reset_combos()
            self.__failing_students()
            self.__best_students()
            self.__easiest_disciplines()
        except NoMoreStepsError as e:
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", str(e))
    def __redo(self):
        try:
            self.__service.Redo()
            self.StudentIDLineEdit.setText("")
            self.StudentNameLineEdit.setText("")
            self.DisciplineIDLineEdit.setText("")
            self.DisciplineNameLineEdit.setText("")
            self.__list_disciplines()
            self.__list_grades()
            self.__list_students()
            self.__reset_combos()
            self.__failing_students()
            self.__best_students()
            self.__easiest_disciplines()
        except NoMoreStepsError as e:
            QtWidgets.QMessageBox.warning(self.GradesTab, "Student Register", str(e))

    def __reset_combos(self):
        student_list = self.__service.StudentList
        discipline_list = self.__service.DisciplineList
        self.GradeStudentCombo.clear()
        for ID in student_list.IDs:
            self.GradeStudentCombo.addItem(str(student_list[ID]), ID)
        self.GradeDisciplineCombo.clear()
        for ID in discipline_list.IDs:
            self.GradeDisciplineCombo.addItem(str(discipline_list[ID]), ID)

    def __current_tab_changed(self, tabID):
        if tabID == 2: # Grades
            self.__list_grades()
            self.__reset_combos()
        elif tabID == 3:
            self.__failing_students()
            self.__best_students()
            self.__easiest_disciplines()

    def __init__(self, service):
        self.__service = service
        super().__init__()

    def start(self, w):
        self.setupUi(w)
        self.__list_students()
        self.__list_disciplines()
        self.__list_grades()
        self.SearchStudentBtn.clicked.connect(self.__list_students)
        self.SearchDisciplineBtn.clicked.connect(self.__list_disciplines)
        self.AddStudentBtn.clicked.connect(self.__add_student)
        self.StudentsTable.cellDoubleClicked.connect(self.__copy_student)
        self.AddDisciplineBtn.clicked.connect(self.__add_discipline)
        self.DisciplinesTable.cellDoubleClicked.connect(self.__copy_discipline)
        self.MainTabWidget.currentChanged.connect(self.__current_tab_changed)
        self.AddGradeBtn.clicked.connect(self.__add_grade)
        self.RemoveStudentBtn.clicked.connect(self.__remove_student)
        self.RemoveDisciplineBtn.clicked.connect(self.__remove_discipline)
        self.UpdateStudentBtn.clicked.connect(self.__update_student)
        self.UpdateDisciplineBtn.clicked.connect(self.__update_discipline)
        self.UndoBtn.clicked.connect(self.__undo)
        self.RedoBtn.clicked.connect(self.__redo)

class GUI:
    def __init__(self, service):
        self.__service = service

    def start(self):
        import sys
        app = QtWidgets.QApplication(sys.argv)
        app.setStyle('Fusion')
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53,53,53))
        palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Base, QtGui.QColor(15,15,15))
        palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53,53,53))
        palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53,53,53))
        palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)

        palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(142,45,197).lighter())
        palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
        app.setPalette(palette)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow(self.__service)
        ui.start(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())

#################
if __name__ == "__main__":
    from Service.Service import Service
    from Domain.ProgramSettings import ProgramSettings
    UI = GUI(Service(ProgramSettings("settings.properties")))
    UI.start()
#################